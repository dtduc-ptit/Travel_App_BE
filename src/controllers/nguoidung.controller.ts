import { Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import {NguoiDung} from '../models/nguoidung.model'; // Gi·∫£ s·ª≠ model d√πng .ts

// T·∫°o ng∆∞·ªùi d√πng m·ªõi
export const createNguoiDung = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = new NguoiDung(req.body);
    const savedUser = await user.save();
    res.status(201).json({ message: 'T·∫°o th√†nh c√¥ng', user: savedUser });
  } catch (err: any) {
    res.status(400).json({ message: 'T·∫°o th·∫•t b·∫°i', error: err.message });
  }
};

// L·∫•y danh s√°ch ng∆∞·ªùi d√πng
export const getAllNguoiDung = async (_req: Request, res: Response): Promise<void> => {
  try {
    const users = await NguoiDung.find();
    res.status(200).json(users);
  } catch (err: any) {
    res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
};

// ƒêƒÉng k√Ω
export const registerNguoiDung = async (req: Request, res: Response): Promise<void> => {
    const { ten, taiKhoan, matKhau, email } = req.body;
  
    try {
      // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i
      const existsAccount = await NguoiDung.findOne({ taiKhoan });
      if (existsAccount) {
        res.status(400).json({ message: 'T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i' });
        return;
      }
  
      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
      const existsEmail = await NguoiDung.findOne({ email });
      if (existsEmail) {
        res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' });
        return;
      }
  
      // T·∫°o ng∆∞·ªùi d√πng m·ªõi
      const newUser = new NguoiDung({ ten, taiKhoan, matKhau, email });
      await newUser.save();
  
      // Ph·∫£n h·ªìi th√†nh c√¥ng
      res.status(201).json({
        message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
        user: {
          _id: newUser._id,
          ten: newUser.ten,
          taiKhoan: newUser.taiKhoan,
          email: newUser.email,
          ngayTao: newUser.ngayTao,
        },
      });
    } catch (err: any) {
        console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', err);
      
        if (err.name === 'ValidationError') {
          const errors: { [key: string]: string } = {};
      
          for (const field in err.errors) {
            errors[field] = err.errors[field].message;
          }
      
          res.status(400).json({
            message: 'L·ªói x√°c th·ª±c d·ªØ li·ªáu',
            errors,
          });
        } else {
          res.status(500).json({ message: 'L·ªói server', error: err.message });
        }
      }
  };
// ƒêƒÉng nh·∫≠p
export const loginNguoiDung = async (req: Request, res: Response): Promise<void> => {
  try {
    const { taiKhoan, matKhau } = req.body;
    const nguoiDung = await NguoiDung.findOne({ taiKhoan });

    if (!nguoiDung) {
      res.status(400).json({ message: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i' });
      return;
    }

    const isMatch = await bcrypt.compare(matKhau, nguoiDung.matKhau);
    if (!isMatch) {
      res.status(400).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' });
      return;
    }

    res.status(200).json({
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      idNguoiDung: nguoiDung._id, // üëà G·ª≠i lu√¥n ID ng∆∞·ªùi d√πng
      nguoiDung,
    });
  } catch (error) {
    console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};


// L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng theo ID
export const getNguoiDungInfo = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const nguoiDung = await NguoiDung.findById(id);
    if (!nguoiDung) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }
    res.json(nguoiDung);
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};