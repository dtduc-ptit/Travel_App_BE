import mongoose from 'mongoose';

const hoatDongSchema = new mongoose.Schema({
  thoiGian: {
    type: String,
    required: [true, 'Th·ªùi gian ho·∫°t ƒë·ªông l√† b·∫Øt bu·ªôc'],
    validate: {
      validator: function (v: string) {
        return /^([01]\d|2[0-3]):([0-5]\d)$/.test(v); // ƒë·ªãnh d·∫°ng HH:mm
      },
      message: 'Th·ªùi gian ph·∫£i theo ƒë·ªãnh d·∫°ng HH:mm (VD: 08:30)',
    },
  },
  noiDung: {
    type: String,
    required: [true, 'N·ªôi dung ho·∫°t ƒë·ªông l√† b·∫Øt bu·ªôc'],
    trim: true,
    minlength: [3, 'N·ªôi dung ph·∫£i d√†i √≠t nh·∫•t 3 k√Ω t·ª±'],
  },
  diaDiem: {
    type: String,
    trim: true,
    maxlength: [200, 'ƒê·ªãa ƒëi·ªÉm kh√¥ng qu√° 200 k√Ω t·ª±'],
  },
  ghiChu: {
    type: String,
    trim: true,
  },
});

const lichTrinhSchema = new mongoose.Schema({
  tenLichTrinh: {
    type: String,
    required: [true, 'T√™n l·ªãch tr√¨nh l√† b·∫Øt bu·ªôc'],
    trim: true,
    minlength: [3, 'T√™n ph·∫£i d√†i √≠t nh·∫•t 3 k√Ω t·ª±'],
  },
  ngay: {
    type: Date,
    required: [true, 'Ng√†y √°p d·ª•ng l·ªãch tr√¨nh l√† b·∫Øt bu·ªôc'],
  },
  suKien: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'SuKien',
    default: null,
  },
  diTich: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'DTTich',
    default: null,
  },
  hoatDongs: {
    type: [hoatDongSchema],
    validate: {
      validator: function (arr: any[]) {
        return arr.length > 0;
      },
      message: 'C·∫ßn √≠t nh·∫•t m·ªôt ho·∫°t ƒë·ªông trong l·ªãch tr√¨nh',
    },
  },
}, {
  validateBeforeSave: true,
});

// üëá Custom validation: ch·ªâ c√≥ 1 trong 2 tr∆∞·ªùng suKien ho·∫∑c diTich
lichTrinhSchema.pre('validate', function (next) {
  const hasSuKien = !!this.suKien;
  const hasDiTich = !!this.diTich;

  if ((hasSuKien && hasDiTich) || (!hasSuKien && !hasDiTich)) {
    const error = new mongoose.Error.ValidationError(this as any);
    error.addError('suKien', new mongoose.Error.ValidatorError({
      message: 'Ch·ªâ ƒë∆∞·ª£c ch·ªçn 1 trong 2: s·ª± ki·ªán ho·∫∑c di t√≠ch',
      path: 'suKien',
    }));
    error.addError('diTich', new mongoose.Error.ValidatorError({
      message: 'Ch·ªâ ƒë∆∞·ª£c ch·ªçn 1 trong 2: s·ª± ki·ªán ho·∫∑c di t√≠ch',
      path: 'diTich',
    }));
    return next(error);
  }

  next();
});

export const LichTrinh = mongoose.model('LichTrinh', lichTrinhSchema);
